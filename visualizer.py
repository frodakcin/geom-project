import matplotlib.pyplot as plt
from BichromaticClosestPair import PQStructure
from Util import Point

def PREP(self):
    point = Point.new([0.22872444249255847, 0.7184134489099027], label=0)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.6020226418777144, 0.3827160493827161], label=1)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.4184477626506612, 0.22550564749146315], label=2)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.9876177231249696, 0.6687680588389808], label=3)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.5256063045918119, 0.8058838980824797], label=4)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.43513638803493876, 0.5411084843708958], label=5)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.7346532962474992, 0.5872077751510376], label=6)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.4931074025276924, 0.12857893354347258], label=7)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.6608720050749037, 0.22550564749146315], label=8)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.7074244864099938, 0.33543472550564757], label=9)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.2550749036256283, 0.3413448909902811], label=10)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.27352022641877716, 0.5529288153401629], label=11)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.3288561947982238, 0.4820068295245601], label=12)
    self.P.append(point)
    self.PQ.insert_p(point)
    self.remove_point(11)
    point = Point.new([0.25156150880788564, 0.5434725505647492], label=13)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.5036475869809204, 0.6226687680588391], label=14)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.5264846532962476, 0.43827160493827166], label=15)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.6353998926462695, 0.5257420541108485], label=16)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.8909993656370468, 0.36734961912266884], label=17)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.8268799102132436, 0.6333070659311795], label=18)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.8303933050309863, 0.4571841344890991], label=19)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.766273849607183, 0.7195954820068295], label=20)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.9173498267701167, 0.589571841344891], label=21)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.7759356853559753, 0.1463094299973733], label=22)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.18832040208851802, 0.1711321250328343], label=23)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.14440296686673498, 0.24560021013921726], label=24)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.1531864539110916, 0.39335434725505647], label=25)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.3429097740691944, 0.12621486734961918], label=26)
    self.P.append(point)
    self.PQ.insert_p(point)
    self.remove_point(26)
    point = Point.new([0.3429097740691944, 0.12621486734961918], label=27)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.6327648465329625, 0.09666403992645131], label=28)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.8365417459620359, 0.19122668768058845], label=29)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.6828307226857953, 0.9075387444181771], label=30)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.42108280876396814, 0.8673496191226688], label=31)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.3376396818425804, 0.7231415812976097], label=32)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.13034938759576442, 0.8106120304701866], label=33)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.07589176792075343, 0.6108484370895719], label=34)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.3112892207095106, 0.8082479642763332], label=35)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.8189747718733227, 0.8366167586025742], label=36)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.8830942272971259, 0.7325978460730235], label=37)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.6248597081930416, 0.7160493827160495], label=38)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.93491680085883, 0.2148673496191227], label=39)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.4149343678329186, 0.3437089571841345], label=40)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.5352681403406042, 0.9181770422905174], label=41)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.26473673937442055, 0.9240872077751511], label=42)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.19798223783731028, 0.8342526924087208], label=43)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.10663397257600159, 0.46900446545836627], label=44)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.08028351144293173, 0.28106120304701865], label=45)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.28669545698531207, 0.4583661675860258], label=46)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.36838188649782855, 0.6285789335434726], label=47)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.43513638803493876, 0.39453638035198324], label=48)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.5484433709071391, 0.531652219595482], label=49)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.7118162299321721, 0.42881534016285794], label=50)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.7943810081491242, 0.3578933543472551], label=51)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.7943810081491242, 0.2656947727869714], label=52)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.7214780656809643, 0.19122668768058845], label=53)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.5545918118381887, 0.3106120304701865], label=54)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.4852022641877714, 0.22314158129760972], label=55)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.4790538232567218, 0.35671132125032834], label=56)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.6415483335773191, 0.6226687680588391], label=57)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.42371785487727515, 0.7373259784607303], label=58)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.2094007709949739, 0.5931179406356711], label=59)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.7926243107402529, 0.5363803519831889], label=60)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.940186893085444, 0.49737325978460734], label=61)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.7056677890011224, 0.8023377987916995], label=62)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.6143195237398137, 0.8236143945363804], label=63)
    self.Q.append(point)
    self.PQ.insert_q(point)
    point = Point.new([0.493985751232128, 0.7101392172314158], label=64)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.5519567657248817, 0.16758602574205414], label=65)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.32973454350265946, 0.2692408720777516], label=66)
    self.P.append(point)
    self.PQ.insert_p(point)
    point = Point.new([0.2726418777143415, 0.039926451273969044], label=67)
    self.P.append(point)
    self.PQ.insert_p(point)
    self.ctr = 69
    pass

class InteractivePoints:
    def __init__(self):
        self.fig, self.ax = plt.subplots()
        self.ax.set_xlim(0, 1)
        self.ax.set_ylim(0, 1)
        self.points = []
        self.cid = self.fig.canvas.mpl_connect('button_press_event', self.on_click)

        self.P = []
        self.Q = []
        self.PQ = PQStructure.new(self.P, self.Q)
        self.ctr = 0

        PREP(self)

        self.fig_pq = plt.figure(figsize=(8, 8), dpi=96)

        self.draw_all()
        plt.show(block=True)

    def remove_point(self, label):
        for point in self.P:
            if point.label == label:
                self.PQ.remove_p(point)
                self.P.remove(point)
                return
        for point in self.Q:
            if point.label == label:
                self.PQ.remove_q(point)
                self.Q.remove(point)
                return

    def draw_all(self):
        self.ax.cla()
        self.fig.tight_layout(pad=1)
        self.ax.set_xlim(0, 1)
        self.ax.set_ylim(0, 1)
        for point in self.P:
            self.ax.plot(point.coordinates[0], point.coordinates[1], 'bo')
        for point in self.Q:
            self.ax.plot(point.coordinates[0], point.coordinates[1], 'ro')

        # Draw line for the closest pair
        closest_pair = self.PQ.find_closest_pair()
        if closest_pair.p1 and closest_pair.p2:
            p, q = closest_pair.p1, closest_pair.p2
            self.ax.plot([p.coordinates[0], q.coordinates[0]], [p.coordinates[1], q.coordinates[1]], 'g-')  # green line

        self.PQ.display_all(on=self.fig_pq)

        self.fig.canvas.draw()

    def on_click(self, event):
        if event.inaxes != self.ax:
            return


        x, y = event.xdata, event.ydata
        if event.button == 1:  # Left mouse button
            if event.key != None and 'shift' in event.key:
                point = Point.new([x, y], label=self.ctr)
                self.ctr += 1
                self.Q.append(point)
                self.ax.plot(x, y, 'ro')  # Add a point to 'Q'
                self.PQ.insert_q(point)
                print(f"point = {repr(point)}")
                print(f"self.Q.append(point)")
                print(f"self.PQ.insert_q(point)")
            else:
                point = Point.new([x, y], label=self.ctr)
                self.ctr += 1
                self.P.append(point)
                self.ax.plot(x, y, 'bo')  # Add a point to 'P'
                self.PQ.insert_p(point)
                print(f"point = {repr(point)}")
                print(f"self.P.append(point)")
                print(f"self.PQ.insert_p(point)")
        elif event.button == 3:  # Right mouse button
            # Find the closest point
            if self.P or self.Q:
                closest_point = min(self.P + self.Q, key=lambda point: (point.coordinates[0] - x) ** 2 + (point.coordinates[1] - y) ** 2)
                self.remove_point(closest_point.label)
                print(f"self.remove_point({closest_point.label})")

        # Redraw all points and draw closest pair line
        self.draw_all()

# Create an instance of the interactive plot
interactive_plot = InteractivePoints()